# The aws region that is used to create the LambdaClient.
region: ${lambda-invoker.region:us-east-1}
# endpoint override if for lambda function deployed in virtual private cloud. Here is an example.
# https://vpce-0012C939329d982-tk8ps.lambda.ca-central-1.vpce.amazonaws.com
endpointOverride: ${lambda-invoker.endpointOverride:}
# Api call timeout in milliseconds. This sets the amount of time for the entire execution, including all retry attempts.
apiCallTimeout: ${lambda-invoker.apiCallTimeout:60000}
# Api call attempt timeout in milliseconds. This sets the amount of time for each individual attempt.
apiCallAttemptTimeout: ${lambda-invoker.apiCallAttemptTimeout:20000}
# The maximum number of retries for the Lambda function invocation. Default is 2, which equals to 3 max attempts.
# Set to 0 to disable retries so that the Lambda function is invoked only once.
maxRetries: ${lambda-invoker.maxRetries:2}
# The maximum number of concurrent requests that can be made to Lambda. Default is 50.
maxConcurrency: ${lambda-invoker.maxConcurrency:50}
# The maximum number of pending acquires allowed. Default is 10000.
maxPendingConnectionAcquires: ${lambda-invoker.maxPendingConnectionAcquires:10000}
# The amount of time to wait when acquiring a connection from the pool before timing out in seconds. Default is 10 seconds.
connectionAcquisitionTimeout: ${lambda-invoker.connectionAcquisitionTimeout:10}
# The LogType of the execution log of Lambda. Set Tail to include and None to not include.
logType: ${lambda-invoker.logType:Tail}
# mapping of the endpoints to Lambda functions. Define a list of functions in values.yml file.
functions: ${lambda-invoker.functions:}
# When LambdaFunctionHandler is used in the light-gateway, it can collect the metrics info for the total
# response time of the downstream Lambda functions. With this value injected, users can quickly determine
# how much time the light-gateway handlers spend and how much time the downstream Lambda function spends,
# including the network latency. By default, it is false, and metrics will not be collected and injected
# into the metrics handler configured in the request/response chain.
metricsInjection: ${lambda-invoker.metricsInjection:false}
# When the metrics info is injected into the metrics handler, we need to pass a metric name to it so that
# the metrics info can be categorized in a tree structure under the name. By default, it is lambda-response,
# and users can change it.
metricsName: ${lambda-invoker.metricsName:lambda-response}
